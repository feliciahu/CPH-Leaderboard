-- SHOW TASKS LIKE 'TSK_KEVIN_B_CPH_FY26_LEADERBOARD%';
-- DESC TASK TSK_KEVIN_B_CPH_FY26_LEADERBOARD;
-- execute task TSK_KEVIN_B_CPH_FY26_LEADERBOARD;


select *  from table(SBX_PSAS_DB.INFORMATION_SCHEMA.task_history(
scheduled_time_range_start=>dateadd('day',-7,current_timestamp()),
result_limit => 10,
task_name=>'TSK_KEVIN_B_CPH_FY26_LEADERBOARD'));
    
-- alter task TSK_KEVIN_B_CPH_FY26_LEADERBOARD resume; --It was by default suspended  ( run this command Only first time since by default its suspended)


--TASK
CREATE OR REPLACE TASK TSK_KEVIN_B_CPH_FY26_LEADERBOARD
WAREHOUSE = SBX_EA_GENERAL_FR_WH
SCHEDULE = 'USING CRON 50 6 * * 1-5 America/Chicago' -- 6:50 AM on weekdays
TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD HH24'
AS

CREATE OR REPLACE TABLE SBX_PSAS_DB.SALES_OPS_GOV.FY26_LEADERBOARD AS
WITH 
--PULL MAX SALES DATE FOR ACTUALS
-- CREATE OR REPLACE TABLE 
MAX_DATE AS (
SELECT  MAX(PERIOD) MAX_PERIOD
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT
WHERE   MARKET_SEGMENT = 'Retail'),

--LOCATION ID
-- CREATE OR REPLACE TABLE 
LOC AS (
SELECT  LPAD(CUST_ACCT_ID,6,0) CUST_ACCT_ID, MAX(INA_LOC_ID) AS LOC_ID
FROM    PRD_PSAS_DB.RPT.T_LOCATION_MAP
WHERE   INA_LOC_ID IS NOT NULL
AND     CUST_ACCT_ID BETWEEN '000000' AND '999999' 
GROUP BY LPAD(CUST_ACCT_ID,6,0)),

--CUSTOMER ATTRIBUTES
-- CREATE OR REPLACE TABLE 
CUST AS (
SELECT  ACCOUNTID AS ACCOUNT_ID,
        ACCOUNTNAME AS ACCOUNT_NAME,
        TERRITORYID AS TERRITORY_ID,
        HOMEDCID AS HOME_DC_ID,
        STATE AS ACCOUNT_STATE
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_CUSTOMER_ACCOUNT_INFO
WHERE   EFFECTIVE_END >= CURRENT_DATE
GROUP BY ACCOUNTID,
        ACCOUNTNAME,
        TERRITORYID,
        HOMEDCID,
        STATE),

--FIND AVP
-- CREATE OR REPLACE TABLE 
AVP_PREP AS (
SELECT    REP_ID, REP_NAME, VPS_ID, VPS_NAME, 
          CASE WHEN REP_ID IN ('122251','258211','305424','182704','305444','263597','233059') THEN '271720' ELSE AVP_ID END AVP_ID, 
          CASE WHEN REP_ID IN ('122251','258211','305424','182704','305444','263597','233059') THEN 'Sangani,RoopaArora' ELSE AVP_NAME END AVP_NAME, 
          EFFECTIVE_START, EFFECTIVE_END
FROM      DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT
LEFT JOIN DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_PLAN_ASSIGNMENT
ON        V_PE_FILTER_DATA_NO_ACCT.REP_ID = V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID
WHERE     V_PE_FILTER_DATA_NO_ACCT.VPS_ID <> 'VPS NOT FOUND'
AND       V_PE_FILTER_DATA_NO_ACCT.REP_ROLE_ID NOT LIKE '%MHS%'
AND       V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_END >= '2025-04-01' --FY26
GROUP BY  REP_ID, REP_NAME, VPS_ID, VPS_NAME,
          CASE WHEN REP_ID IN ('122251','258211','305424','182704','305444','263597','233059') THEN '271720' ELSE AVP_ID END, 
          CASE WHEN REP_ID IN ('122251','258211','305424','182704','305444','263597','233059') THEN 'Sangani,RoopaArora' ELSE AVP_NAME END,
          EFFECTIVE_START, EFFECTIVE_END),

-- CREATE OR REPLACE TABLE 
AVP AS (
SELECT DISTINCT   VPS_ID,VPS_NAME,AVP_ID,AVP_NAME
FROM AVP_PREP
GROUP BY VPS_ID,VPS_NAME,AVP_ID,AVP_NAME),
          
--PULL ACTUALS
-- CREATE OR REPLACE TABLE 
PREP AS (
SELECT  PAYEE_ID,
        PAYEE_NAME,
        ROLE,
        ROLE_NAME,
        ACCOUNT_ID,
        ACCOUNT_NAME,
        ACCOUNT_STATE,
        HOMEDCID AS HOME_DC_ID,
        TERRITORY_ID,
        PERIOD,
        PRODUCT_SEGMENT,
        --GROSS PROFIT ACTUALS
        SUM(GROSS_PROFIT) AS GROSS_PROFIT_ACTUAL,
        --NET REVENUE ACTUALS
        SUM(NET_REVENUE) AS NET_REVENUE_ACTUAL,
        --GENERIC UNITS ACTUALS
        SUM(GENERIC_UNITS) AS GENERIC_UNITS_ACTUAL,
        0 AS GROSS_PROFIT_GOAL,
        0 AS NET_SALES_GOAL
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT
WHERE   MARKET_SEGMENT = 'Retail'
GROUP BY PAYEE_ID,
        PAYEE_NAME,
        ROLE,
        ROLE_NAME,
        ACCOUNT_ID,
        ACCOUNT_NAME,
        ACCOUNT_STATE,
        HOMEDCID,
        TERRITORY_ID,
        PERIOD,
        PRODUCT_SEGMENT
UNION ALL
SELECT  PAYEEID AS PAYEE_ID,
        CASE WHEN PAYEENAME = 'Smith,DavidT.' THEN 'Smith,DavidThomas' ELSE PAYEENAME END AS PAYEE_NAME,
        COMPPLAN AS ROLE,
        COMPPLANNAME AS ROLE_NAME,
        ACCOUNTID AS ACCOUNT_ID,
        CUST.ACCOUNT_NAME,
        CUST.ACCOUNT_STATE,
        CUST.HOME_DC_ID,
        CUST.TERRITORY_ID,
        MONTH AS PERIOD,
        'GOALS' AS PRODUCT_SEGMENT,
        --GROSS PROFIT ACTUALS
        0 AS GROSS_PROFIT_ACTUAL,
        --NET REVENUE ACTUALS
        0 AS NET_REVENUE_ACTUAL,
        --GENERIC UNITS ACTUALS
        0 AS GENERIC_UNITS_ACTUAL,
        SUM(CASE WHEN PRODUCTGROUP = 'GROSS PROFIT' THEN TARGETVALUE ELSE 0 END) AS GROSS_PROFIT_GOAL,
        SUM(CASE WHEN PRODUCTGROUP = 'NET SALES' THEN TARGETVALUE ELSE 0 END) AS NET_SALES_GOAL
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_ACCOUNT_TARGETS
LEFT JOIN CUST
ON      V_PE_PAYEE_ACCOUNT_TARGETS.ACCOUNTID = CUST.ACCOUNT_ID
WHERE   COMPPLAN NOT LIKE '%MHS%'
AND     PRODUCTGROUP = 'GROSS PROFIT'
--AND     GOALTYPEID = 'ACCOUNT GOAL' --ALLOW STRETCH GOAL TO FLOW THROUGH
GROUP BY PAYEEID,
        CASE WHEN PAYEENAME = 'Smith,DavidT.' THEN 'Smith,DavidThomas' ELSE PAYEENAME END,
        COMPPLAN,
        COMPPLANNAME,
        ACCOUNTID,
        CUST.ACCOUNT_NAME,
        CUST.ACCOUNT_STATE,
        CUST.HOME_DC_ID,
        CUST.TERRITORY_ID,
        MONTH),
        
--CREATE ACCOUNT TO VPS MAP LIST
-- CREATE OR REPLACE TABLE 
VPS AS (
SELECT  ACCOUNT_ID,
        PAYEE_ID, 
        PAYEE_NAME,
        PERIOD
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT
WHERE   MARKET_SEGMENT = 'Retail'
AND     ROLE = 'USP_RETAIL_SM'
GROUP BY ACCOUNT_ID,
        PAYEE_ID, 
        PAYEE_NAME,
        PERIOD
UNION
SELECT  ACCOUNTID AS ACCOUNT_ID,
        PAYEEID AS PAYEE_ID, 
        PAYEENAME AS PAYEE_NAME,
        MONTH AS PERIOD
FROM    DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_ACCOUNT_TARGETS
WHERE   COMPPLAN NOT LIKE '%MHS%'
AND     PRODUCTGROUP = 'GROSS PROFIT'
--AND     GOALTYPEID = 'ACCOUNT GOAL'
AND     COMPPLAN = 'USP_RETAIL_SM'
GROUP BY ACCOUNTID,
        PAYEEID, 
        PAYEENAME,
        MONTH),
        
--CLEAN-UP TABLE
-- CREATE OR REPLACE TABLE 
COMBINED AS (
SELECT  PREP.PAYEE_ID,
        PREP.PAYEE_NAME,
        CASE WHEN ROLE = 'USP_COMBO' THEN 'USP_RSM' ELSE ROLE END AS "ROLE",
        ROLE_NAME,
        PREP.ACCOUNT_ID,
        ACCOUNT_NAME,
        ACCOUNT_STATE,
        HOME_DC_ID,
        TERRITORY_ID,
        PREP.PERIOD,
        PRODUCT_SEGMENT,
        VPS_ORIG.PAYEE_ID AS VPS_PAYEE_ID,
        VPS_ORIG.PAYEE_NAME AS VPS_PAYEE_NAME,
//        COALESCE(VPS_ORIG.PAYEE_ID,VPS_NEW.PAYEE_ID) AS VPS_PAYEE_ID,
//        COALESCE(VPS_ORIG.PAYEE_NAME, VPS_NEW.PAYEE_NAME) AS VPS_PAYEE_NAME,
        SUM(GROSS_PROFIT_ACTUAL) AS GROSS_PROFIT_ACTUAL,
        SUM(NET_REVENUE_ACTUAL) AS NET_REVENUE_ACTUAL,
        SUM(GENERIC_UNITS_ACTUAL) AS GENERIC_UNITS_ACTUAL,
        SUM(GROSS_PROFIT_GOAL) AS GROSS_PROFIT_GOAL,
        SUM(NET_SALES_GOAL) AS NET_SALES_GOAL
FROM    PREP
LEFT JOIN VPS VPS_ORIG
ON      PREP.ACCOUNT_ID = VPS_ORIG.ACCOUNT_ID
AND     PREP.PERIOD = VPS_ORIG.PERIOD
AND     PREP.ACCOUNT_ID <> '0'
//LEFT JOIN VPS VPS_NEW   
//ON      PREP.ACCOUNT_ID = VPS_NEW.ACCOUNT_ID
//AND     PREP.PERIOD = VPS_NEW.PERIOD
//AND     PREP.ROLE <> 'USP_RETAIL_SM' 
//AND     PREP.ACCOUNT_ID = '0'
WHERE   PREP.PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE) --EXCLUDE MONTHS WITHOUT ACTUAL
GROUP BY PREP.PAYEE_ID,
        PREP.PAYEE_NAME,
        CASE WHEN ROLE = 'USP_COMBO' THEN 'USP_RSM' ELSE ROLE END,
        ROLE_NAME,
        PREP.ACCOUNT_ID,
        ACCOUNT_NAME,
        ACCOUNT_STATE,
        HOME_DC_ID,
        TERRITORY_ID,
        PREP.PERIOD,
        PRODUCT_SEGMENT,
        VPS_ORIG.PAYEE_ID,
        VPS_ORIG.PAYEE_NAME),
//        COALESCE(VPS_ORIG.PAYEE_ID,VPS_NEW.PAYEE_ID),
//        COALESCE(VPS_ORIG.PAYEE_NAME, VPS_NEW.PAYEE_NAME))

--GROSS PROFIT RANK
-- CREATE OR REPLACE TABLE 
GP_RANK AS (
SELECT      PAYEE_ID, 
            PAYEE_NAME,
            ROLE,
            ROLE_NAME,
            SUM(GROSS_PROFIT_ACTUAL) AS GROSS_PROFIT_ACTUAL,
            SUM(GROSS_PROFIT_GOAL) AS GROSS_PROFIT_GOAL,
            RANK() OVER (PARTITION BY ROLE ORDER BY CASE WHEN SUM(ZEROIFNULL(GROSS_PROFIT_ACTUAL))/ SUM(NULLIFZERO(GROSS_PROFIT_GOAL)) IS NULL THEN 0 ELSE SUM(ZEROIFNULL(GROSS_PROFIT_ACTUAL))/ SUM(NULLIFZERO(GROSS_PROFIT_GOAL)) END DESC) AS GROSS_PROFIT_RANK
            --RANK() OVER (PARTITION BY ROLE ORDER BY SUM(ZEROIFNULL(GROSS_PROFIT_ACTUAL))/ SUM(NULLIFZERO(GROSS_PROFIT_GOAL)) DESC) AS GROSS_PROFIT_RANK
FROM        COMBINED
WHERE       PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE) --EXCLUDE MONTHS WITHOUT ACTUAL
GROUP BY    PAYEE_ID,
            PAYEE_NAME,
            ROLE,
            ROLE_NAME),
            
--FINAL PULL
-- CREATE OR REPLACE TABLE 
FINAL_PREP AS (
  
SELECT      COMBINED.*,
            GP_RANK.GROSS_PROFIT_RANK,
            LOC.LOC_ID
FROM        COMBINED
LEFT JOIN   GP_RANK
ON          COMBINED.PAYEE_ID = GP_RANK.PAYEE_ID
AND         COMBINED.ROLE = GP_RANK.ROLE
LEFT JOIN   LOC
ON          COMBINED.ACCOUNT_ID = LOC.CUST_ACCT_ID
WHERE       PERIOD <= (SELECT MAX_PERIOD FROM MAX_DATE)), --EXCLUDE MONTHS WITHOUT ACTUAL

--ISAM
-- CREATE OR REPLACE TABLE 
ISAM AS (
SELECT DISTINCT CUST_ACCT_ID,REP_NAME,'ISAM' AS ROLE_TYPE,
CASE WHEN YR_MTH='2025-04-01' THEN '2026-01 APR'
     WHEN YR_MTH='2025-05-01' THEN '2026-02 MAY'
     WHEN YR_MTH='2025-06-01' THEN '2026-03 JUN'
     WHEN YR_MTH='2025-07-01' THEN '2026-04 JUL'
     WHEN YR_MTH='2025-08-01' THEN '2026-05 AUG'
     WHEN YR_MTH='2025-09-01' THEN '2026-06 SEP'
     WHEN YR_MTH='2025-10-01' THEN '2026-07 OCT'
     WHEN YR_MTH='2025-11-01' THEN '2026-08 NOV'
     WHEN YR_MTH='2025-12-01' THEN '2026-09 DEC'
     WHEN YR_MTH='2026-01-01' THEN '2026-10 JAN'
     WHEN YR_MTH='2026-02-01' THEN '2026-11 FEB'
     ELSE '2026-12 MAR' END AS PERIOD
FROM SBX_PSAS_DB.ANALYTICS.T_CPH_ACCT_LEVEL_HIERARCHY
WHERE 
-- CUST_ACCT_ID='901373'
REP_TITLE='SSM'
AND YR_MTH>='2025-04-01' --FY26
GROUP BY 1,2,3,4)


--FINAL PULL WITH UPDATE OF ACCOUNT NAME
-- CREATE OR REPLACE TABLE SBX_PSAS_DB.SALES_OPS_GOV.FY26_LEADERBOARD AS
SELECT     FINAL_PREP.PAYEE_ID
          , FINAL_PREP.PAYEE_NAME
          , FINAL_PREP.ROLE
          , FINAL_PREP.ROLE_NAME
          , FINAL_PREP.ACCOUNT_ID
          , CUST.ACCOUNT_NAME
          , FINAL_PREP.ACCOUNT_STATE
          , FINAL_PREP.HOME_DC_ID
          , FINAL_PREP.TERRITORY_ID
          , FINAL_PREP.PERIOD
          , FINAL_PREP.PRODUCT_SEGMENT
          , FINAL_PREP.VPS_PAYEE_ID
          , FINAL_PREP.VPS_PAYEE_NAME
          , FINAL_PREP.GROSS_PROFIT_ACTUAL
          , FINAL_PREP.NET_REVENUE_ACTUAL
          , FINAL_PREP.GENERIC_UNITS_ACTUAL
          , FINAL_PREP.GROSS_PROFIT_GOAL
          , FINAL_PREP.NET_SALES_GOAL
          , FINAL_PREP.GROSS_PROFIT_RANK
          , FINAL_PREP.LOC_ID
          , AVP.AVP_ID
          , AVP.AVP_NAME
          , CASE WHEN B.ROLE_TYPE IS NULL THEN FINAL_PREP.ROLE
            ELSE B.ROLE_TYPE END AS ROLE_NEW
          , CASE WHEN B.REP_NAME IS NULL THEN FINAL_PREP.PAYEE_NAME
            ELSE B.REP_NAME END AS REP_NEW
FROM      FINAL_PREP
LEFT JOIN CUST
ON        FINAL_PREP.ACCOUNT_ID = CUST.ACCOUNT_ID  
LEFT JOIN AVP
ON        FINAL_PREP.PAYEE_ID = AVP.VPS_ID
LEFT JOIN HIER
ON        FINAL_PREP.ACCOUNT_ID = HIER.CUST_ACCT_ID
LEFT JOIN ISAM B
ON        FINAL_PREP.ACCOUNT_ID = B.CUST_ACCT_ID
AND       FINAL_PREP.PERIOD = B.PERIOD
GROUP BY  FINAL_PREP.PAYEE_ID
          , FINAL_PREP.PAYEE_NAME
          , FINAL_PREP.ROLE
          , FINAL_PREP.ROLE_NAME
          , FINAL_PREP.ACCOUNT_ID
          , CUST.ACCOUNT_NAME
          , FINAL_PREP.ACCOUNT_STATE
          , FINAL_PREP.HOME_DC_ID
          , FINAL_PREP.TERRITORY_ID
          , FINAL_PREP.PERIOD
          , FINAL_PREP.PRODUCT_SEGMENT
          , FINAL_PREP.VPS_PAYEE_ID
          , FINAL_PREP.VPS_PAYEE_NAME
          , FINAL_PREP.GROSS_PROFIT_ACTUAL
          , FINAL_PREP.NET_REVENUE_ACTUAL
          , FINAL_PREP.GENERIC_UNITS_ACTUAL
          , FINAL_PREP.GROSS_PROFIT_GOAL
          , FINAL_PREP.NET_SALES_GOAL
          , FINAL_PREP.GROSS_PROFIT_RANK
          , FINAL_PREP.LOC_ID
          , AVP.AVP_ID
          , AVP.AVP_NAME
          , CASE WHEN B.ROLE_TYPE IS NULL THEN FINAL_PREP.ROLE
            ELSE B.ROLE_TYPE END
          , CASE WHEN B.REP_NAME IS NULL THEN FINAL_PREP.PAYEE_NAME
            ELSE B.REP_NAME END

--SELECT top 10* FROM SBX_PSAS_DB.SALES_OPS_GOV.FY26_LEADERBOARD;


--SELECT top 10* FROM SBX_PSAS_DB.SALES_OPS_GOV.FY24_LEADERBOARD_ARCHIVE;

